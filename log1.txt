1. gradle.bundle
#build
- ext : 전역변수 설정(의존성으로 주입된 플러그인의 2.1.9를 받음)
- repository : 1 mavenCentral, 2 jcenter > * 1은 라이브러리 업로드 난이도가 높아 최근에 2로 대체 > 최근에는 2에 업로드하면 1에도 적용
- dependencies : ext 참고
#apply plugin
- 의존성을 적용할건지의 여부
- management는 부트의  의존성 관리를 위해 필수
#repository
#dependencies
- 의존성을 선언함 > 스타터웹과 스타터테스트를 받음 > 버전을 명시하지 않아서 빌드의 버전을 따라감

2. App생성
#main
- @SpringbootApplication 생성시 최상단 디렉 > .run으로 톰캣실행(내장 WAS로 버전환경 일치)

3. 컨트롤러생성
#controller
- 장고의 url매핑이랑 비슷하게 getmapping시 메소드 실행해서 문자열 반환
#test
- 컨트롤러 테스트의 경우 extendswith와 webmvc(부트Test를 쓰면 무겁기에 대체) 어노테를 사용함
- perform으로 사용자처럼 요청을 전송하며 return - ResultAction > http메소드 결정 > andExpect로 응답을 검증

4. 롬복 전환
#Dto
- 롬복의 어노테이션을 사용하여 기존의 게터세터, 생성자를 만듦(Re어노의 경우 final이 없는 경우 생성자 생성x)
#Test
- jUnit 기본 대신 assertj를 사용하면 자동완성 기능이 더 좋음과 추가적인 라이브러리를 안써도된다.
#맵핑
- 컨트롤러에 requestParam을 이용해 외부api 데이터를 서버 내의 변수로 저장

5. jpa
#의존성
- jpa와 h2 추가
#도메인
- 롬복 어노는 필수가 아니기에 수정이 쉽게 클래스 바깥에 위치
#빌더 패턴
- 생성자로만 해결하기 힘든 긴 코드(길고, 인자 일부가 null일때) > 필수와 선택 인자 구분 및 긴 코드에서 인자의 의미 가독성
- 생성자 상단에 생성시 생성자에 포함된 필드만 빌더 적용
- 생성자 생성에 대한 정보를 먼저 작성한 뒤 > 빌더 패턴을 이용함
public Member(String username) > Member member = Member.Builder()
        this.username = username;          .username("name")

6. 엔티티와 리파지토리
#리파지토리(= DAO)
- 리파지토리는 DB Layer 접근자(DAO와 동급)이며 테이블 생성시 entity와 항상 따라가며 기본적인 crud를 생성해줌
#테스트
- 쿼리로그를 확인하기 위해 리소드에 프로퍼티 생성 후 항목 추가
#엔티티 클래스
- 도메인으로서 실제 DB테이블과 매칭될 클래스며 앞단에는 보여지지 않음

$ 주문 취소 로직
기존 트랜잭션 스크립트 : Dto를 생성해 각각 Dao의 값을 조회/수정하고 Dto 상태를 취소로 수정
> 서비스 클래스에서 이 모든 로직이 처리되며 객체가 데이터로만 취급됨
도메인 모델 : 도메인 모델 객체를 생성하여 객체에게 일을 맡김
> 모델이 직접 조회/수정 등을 처리하며 상태를 이전에 서비스 내부에서 로직을 내가 직접 처리하던 걸 객체가 처리(서비스는 단순히 이 트랜잭션,순서만 보장)
> DTO, DAO를 코드로 명시할 필요 없이 객체만 생성하면됨

7. 서비스
#request/response
-응답요청dto생성시 엔티티와 반드시 독립적으로 > 응답요청 화면은 자주바뀌지만 이를 수정할때 코어한 엔티티가 변경되선 안됨.

8. 화면개발
#api & dto
- 설계시 api를 통해 화면 구성이 이루어지므로 api 요청 및 응답에 dto 객체를 사용하도록 설계
- dto로 param을 받고 entity로 변환한 후 dao로 이동
- 따라서 requestDto클래스 안에 toentity 작성 / responseDto는 entity를 받아서 생성만
* api컨트롤러는 서비스에 로직 요청 후 코딩된 결과를 반환 / 뷰컨트롤러는 뷰 네임을 반환
#페이지 로딩
- 헤더에선 css, 푸터에선 js(js의 용량이 크면 헤더 로딩시 오래걸림 > 바디가 늦어짐)

! 새로 학습한 지식(복습시 책의 테스트 코드 필수!)
* 기존의 mvc에 api요소를 더해봄
* 설계시 실제/api view를 분리 > apicontroller, api js, api 반응 view, 데이터 전달 dto, api test
- view 버튼의 id를 js와 매핑 > js의 api를 받을 controller 생성 > model보단 api처리를 위한 dto 등으로 비즈니스 로직 매핑
- client view의 indexController 생성 > view에 담을 model + 도메인을 전달할 dto로 구성
- 필요에 따라 실제 뷰 하나에서 여러 api를 요청 가능케 설계 가능
* reposit interface를 jpa를 상속해서 구현체처럼 사용 가능

9. 스프링 시큐리티
#이미 있는 리디렉션되는 별도 컨트롤러를 만들 필요 없음



